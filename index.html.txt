<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Time Tracker and Payroll Calculator</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }

        .container {
            max-width: 960px;
            margin: 0 auto;
        }

        .card {
            background-color: #fff;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        input[type="number"],
        input[type="text"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        button {
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        button:hover {
            background-color: #0056b3;
        }

        #data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        #data-table th,
        #data-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        #data-table th {
            background-color: #f0f0f0;
            font-weight: bold;
        }

        #data-table tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .actions-column {
            white-space: nowrap;
        }

        .edit-btn,
        .delete-btn {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 5px;
            font-size: 14px;
        }

        .delete-btn {
            background-color: #dc3545;
        }

        .totals {
            margin-top: 20px;
            padding: 15px;
            background-color: #e9ecef;
            border-radius: 4px;
        }

        .totals p {
            margin-bottom: 8px;
        }

        .two-week-subtotal {
            font-weight: bold;
            background-color: #cce5ff;
            padding: 8px;
            margin-top: 10px;
            border-radius: 4px;
        }

        @media (max-width: 600px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h2>Enter Work Details</h2>
            <div class="form-grid">
                <div class="form-group">
                    <label for="hourly-rate">Hourly Rate:</label>
                    <input type="number" id="hourly-rate" step="0.01" required>
                </div>
                 <div class="form-group">
                    <label for="break-week">Break (Hours) for the Week:</label>
                    <input type="number" id="break-week" step="0.01" value="0">
                </div>
                <div class="form-group">
                    <label for="week-date-range">Week Date Range:</label>
                    <input type="text" id="week-date-range" placeholder="e.g., Jan 1 - Jan 7" required>
                </div>
            </div>
            <div id="daily-hours-container">
                </div>
            <button onclick="addWeek()">Add New Week</button>
        </div>

        <div class="card">
            <h2>Time Tracking Data</h2>
            <table id="data-table">
                <thead>
                    <tr>
                        <th>Week</th>
                        <th>Date Range</th>
                        <th>Day</th>
                        <th>Date</th>
                        <th>Hours Worked</th>
                        <th>Break (Hours)</th>
                        <th>Co-worker</th>
                        <th>Notes</th>
                        <th>Regular Hours</th>
                        <th>Overtime Hours</th>
                        <th>Regular Pay</th>
                        <th>Overtime Pay</th>
                        <th>Total Pay</th>
                        <th class="actions-column">Actions</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="12" style="text-align: right; font-weight: bold;">Grand Total Earnings:</td>
                        <td id="grand-total-earnings" style="font-weight: bold;">$0.00</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
            <button onclick="exportToCSV()">Export to CSV</button>
            <button onclick="clearAllData()">Clear All Data</button>
        </div>

        <div class="card totals">
            <h2>Weekly, Monthly, and Yearly Totals</h2>
            <p><strong>Total Hours (Week):</strong> <span id="total-hours-week">0.00</span></p>
            <p><strong>Total Hours (Month - Approx.):</strong> <span id="total-hours-month">0.00</span></p>
            <p><strong>Total Hours (Year - Approx.):</strong> <span id="total-hours-year">0.00</span></p>
            <p><strong>Total Earnings (Week):</strong> $<span id="total-earnings-week">0.00</span></p>
            <p><strong>Total Earnings (Month - Approx.):</strong> $<span id="total-earnings-month">0.00</span></p>
            <p><strong>Total Earnings (Year - Approx.):</strong> $<span id="total-earnings-year">0.00</span></p>
        </div>
    </div>

    <script>
        let weekCounter = 1;
        let allWeeksData = JSON.parse(localStorage.getItem('timeTrackerData')) || [];
        const dailyHoursContainer = document.getElementById('daily-hours-container');
        const dataTableBody = document.getElementById('data-table').getElementsByTagName('tbody')[0];
        const totalHoursWeekDisplay = document.getElementById('total-hours-week');
        const totalHoursMonthDisplay = document.getElementById('total-hours-month');
        const totalHoursYearDisplay = document.getElementById('total-hours-year');
        const totalEarningsWeekDisplay = document.getElementById('total-earnings-week');
        const totalEarningsMonthDisplay = document.getElementById('total-earnings-month');
        const totalEarningsYearDisplay = document.getElementById('grand-total-earnings');
        const grandTotalEarningsDisplay = document.getElementById('grand-total-earnings');

        function generateDayInputs(weekNumber) {
            let html = `<h3>Week ${weekNumber}</h3><div class="form-grid">`;
            const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
            days.forEach(day => {
                html += `
                    <div class="form-group">
                        <label for="hours-${weekNumber}-${day.toLowerCase()}">${day} Hours:</label>
                        <input type="number" id="hours-${weekNumber}-${day.toLowerCase()}" step="0.01" value="0">
                    </div>
                    <div class="form-group">
                        <label for="coworker-${weekNumber}-${day.toLowerCase()}">${day} Co-worker:</label>
                        <input type="text" id="coworker-${weekNumber}-${day.toLowerCase()}" value="">
                    </div>
                    <div class="form-group">
                        <label for="notes-${weekNumber}-${day.toLowerCase()}">${day} Notes:</label>
                        <input type="text" id="notes-${weekNumber}-${day.toLowerCase()}" value="">
                    </div>
                `;
            });
            html += `<button onclick="saveWeekData(${weekNumber})">Save Week ${weekNumber} Data</button></div>`;
            return html;
        }

        function addWeek() {
            const newWeekDiv = document.createElement('div');
            newWeekDiv.classList.add('card');
            newWeekDiv.innerHTML = generateDayInputs(weekCounter);
            dailyHoursContainer.appendChild(newWeekDiv);
            weekCounter++;
        }

        function saveWeekData(weekNumber) {
            const hourlyRate = parseFloat(document.getElementById('hourly-rate').value) || 0;
            const weekBreak = parseFloat(document.getElementById('break-week').value) || 0;
            const weekDateRange = document.getElementById('week-date-range').value;
            const weekData = {
                week: weekNumber,
                break: weekBreak,
                dateRange: weekDateRange,
                days: []
            };
            const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
            daysOfWeek.forEach((day, index) => {
                const hours = parseFloat(document.getElementById(`hours-${weekNumber}-${day}`).value) || 0;
                const coworker = document.getElementById(`coworker-${weekNumber}-${day}`).value;
                const notes = document.getElementById(`notes-${weekNumber}-${day}`).value;
                const date = new Date();
                date.setDate(date.getDate() - (date.getDay() - (index + 1) + 7) % 7);

                weekData.days.push({
                    date: date.toLocaleDateString(),
                    day: days[index],
                    hours: parseFloat(hours.toFixed(2)),
                    coworker: coworker,
                    notes: notes
                });
            });

            const existingWeekIndex = allWeeksData.findIndex(week => week.week === weekNumber);
            if (existingWeekIndex > -1) {
                allWeeksData[existingWeekIndex] = weekData;
            } else {
                allWeeksData.push(weekData);
            }

            localStorage.setItem('timeTrackerData', JSON.stringify(allWeeksData));
            loadTableData();
            alert(`Week ${weekNumber} data saved.`);
        }

        function calculatePay(hoursWorked, hourlyRate) {
            const regularHours = Math.min(hoursWorked, 40);
            const overtimeHours = Math.max(0, hoursWorked - 40);
            const regularPay = regularHours * hourlyRate;
            const overtimePay = overtimeHours * 1.5 * hourlyRate;
            return {
                regularHours: parseFloat(regularHours.toFixed(2)),
                overtimeHours: parseFloat(overtimeHours.toFixed(2)),
                regularPay: parseFloat(regularPay.toFixed(2)),
                overtimePay: parseFloat(overtimePay.toFixed(2)),
                totalPay: parseFloat((regularPay + overtimePay).toFixed(2))
            };
        }

        function loadTableData() {
            dataTableBody.innerHTML = '';
            let grandTotalEarnings = 0;
            let twoWeekBlock = [];

            allWeeksData.sort((a, b) => a.week - b.week);

            allWeeksData.forEach(weekData => {
                const weekBreak = weekData.break || 0;
                weekData.days.forEach(dayData => {
                    // Subtract the break time from daily hours
                    const dailyHours = parseFloat((dayData.hours - (weekBreak / 7)).toFixed(2));
                    const payDetails = calculatePay(dailyHours, parseFloat(document.getElementById('hourly-rate').value) || 0);

                    const row = dataTableBody.insertRow();
                    row.insertCell().textContent = weekData.week;
                    row.insertCell().textContent = weekData.dateRange;
                    row.insertCell().textContent = dayData.day;
                    row.insertCell().textContent = dayData.date;
                    row.insertCell().textContent = dayData.hours;
                    row.insertCell().textContent = (weekBreak / 7).toFixed(2); // Show daily break
                    row.insertCell().textContent = dayData.coworker;
                    row.insertCell().textContent = dayData.notes;
                    row.insertCell().textContent = payDetails.regularHours;
                    row.insertCell().textContent = payDetails.overtimeHours;
                    row.insertCell().textContent = `$${payDetails.regularPay.toFixed(2)}`;
                    row.insertCell().textContent = `$${payDetails.overtimePay.toFixed(2)}`;
                    row.insertCell().textContent = `$${payDetails.totalPay.toFixed(2)}`;

                    const actionsCell = row.insertCell();
                    const editButton = document.createElement('button');
                    editButton.textContent = 'Edit';
                    editButton.classList.add('edit-btn');
                    editButton.addEventListener('click', () => editEntry(weekData.week, dayData.day));
                    actionsCell.appendChild(editButton);

                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Delete';
                    deleteButton.classList.add('delete-btn');
                    deleteButton.addEventListener('click', () => deleteEntry(weekData.week, dayData.day, dayData.date));
                    actionsCell.appendChild(deleteButton);

                    twoWeekBlock.push({ hours: dailyHours, pay: payDetails.totalPay });
                    grandTotalEarnings += payDetails.totalPay;

                    if (twoWeekBlock.length === 14) {
                        addTwoWeekSubtotal(twoWeekBlock);
                        twoWeekBlock = [];
                    }
                });
            });

            if (twoWeekBlock.length > 0) {
                addTwoWeekSubtotal(twoWeekBlock);
            }

            grandTotalEarningsDisplay.textContent = `$${grandTotalEarnings.toFixed(2)}`;
            calculateOverallTotals();
        }

        function editEntry(weekNumber, day) {
            const weekData = allWeeksData.find(week => week.week === weekNumber);
            if (weekData) {
                const dayData = weekData.days.find(d => d.day.toLowerCase() === day.toLowerCase());
                if (dayData) {
                    const weekCard = Array.from(dailyHoursContainer.children).find(card => card.innerHTML.includes(`Week ${weekNumber}`));
                    if (weekCard) {
                        weekCard.querySelector(`#hours-${weekNumber}-${day.toLowerCase()}`).value = dayData.hours;
                        weekCard.querySelector(`#break-week`).value = weekData.break;
                        weekCard.querySelector(`#week-date-range`).value = weekData.dateRange;
                        weekCard.querySelector(`#coworker-${weekNumber}-${day.toLowerCase()}`).value = dayData.coworker;
                        weekCard.querySelector(`#notes-${weekNumber}-${day.toLowerCase()}`).value = dayData.notes;
                        const saveButton = weekCard.querySelector(`button[onclick="saveWeekData(${weekNumber})"]`);
                        if (saveButton) {
                            saveButton.textContent = `Update Week ${weekNumber} Data`;
                            saveButton.onclick = () => updateWeekData(weekNumber);
                        }
                    }
                }
            }
        }

        function updateWeekData(weekNumber) {
            const hourlyRate = parseFloat(document.getElementById('hourly-rate').value) || 0;
            const weekBreak = parseFloat(document.getElementById('break-week').value) || 0;
             const weekDateRange = document.getElementById('week-date-range').value;
            const weekData = {
                week: weekNumber,
                break: weekBreak,
                dateRange: weekDateRange,
                days: []
            };
            const daysOfWeek = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
            daysOfWeek.forEach((day, index) => {
                const hours = parseFloat(document.getElementById(`hours-${weekNumber}-${day}`).value) || 0;
                const coworker = document.getElementById(`coworker-${weekNumber}-${day}`).value;
                const notes = document.getElementById(`notes-${weekNumber}-${day}`).value;
                const existingWeek = allWeeksData.find(w => w.week === weekNumber);
                const existingDayData = existingWeek ? existingWeek.days.find(d => d.day.toLowerCase() === day) : null;
                const date = existingDayData ? existingDayData.date : new Date().toLocaleDateString();

                weekData.days.push({
                    date: date,
                    day: days[index],
                    hours: parseFloat(hours.toFixed(2)),
                    coworker: coworker,
                    notes: notes
                });
            });
            const weekIndex = allWeeksData.findIndex(w => w.week === weekNumber);
            if (weekIndex !== -1) {
                allWeeksData[weekIndex] = weekData;
                localStorage.setItem('timeTrackerData', JSON.stringify(allWeeksData));
                loadTableData();
                alert(`Week ${weekNumber} data updated.`);
            } else {
                alert('Week data not found for updating.');
            }
        }

        function deleteEntry(weekNumber, day, date) {
            if (confirm(`Are you sure you want to delete the entry for ${day}, ${date}?`)) {
                const weekIndex = allWeeksData.findIndex(week => week.week === weekNumber);
                if (weekIndex > -1) {
                    const dayIndex = allWeeksData[weekIndex].days.findIndex(d => d.day.toLowerCase() === day.toLowerCase() && d.date === date);
                    if (dayIndex > -1) {
                        allWeeksData[weekIndex].days.splice(dayIndex, 1);
                        localStorage.setItem('timeTrackerData', JSON.stringify(allWeeksData));
                        loadTableData();
                        alert('Entry deleted successfully.');
                    } else {
                        alert('Day entry not found for deletion.');
                    }
                } else {
                    alert('Week data not found for deletion.');
                }
            }
        }

        function calculateOverallTotals() {
            let totalHours = 0;
            let totalEarnings = 0;
            allWeeksData.forEach(weekData => {
                const weekBreak = weekData.break || 0;
                weekData.days.forEach(dayData => {
                    const hours = parseFloat((dayData.hours - (weekBreak / 7)).toFixed(2));
                    const payDetails = calculatePay(hours, parseFloat(document.getElementById('hourly-rate').value) || 0);
                    totalHours += hours;
                    totalEarnings += payDetails.totalPay;
                });
            });
            totalHoursWeekDisplay.textContent = totalHours.toFixed(2);
            totalHoursMonthDisplay.textContent = (totalHours * 4).toFixed(2);
            totalHoursYearDisplay.textContent = (totalHours * 52).toFixed(2);
            totalEarningsWeekDisplay.textContent = totalEarnings.toFixed(2);
            totalEarningsMonthDisplay.textContent = (totalEarnings * 4).toFixed(2);
            totalEarningsYearDisplay.textContent = (totalEarnings * 52).toFixed(2);
             grandTotalEarningsDisplay.textContent = `$${totalEarnings.toFixed(2)}`;
        }

        function addTwoWeekSubtotal(data) {
            let subtotalHours = 0;
            let subtotalPay = 0;
            data.forEach(item => {
                subtotalHours += item.hours;
                subtotalPay += item.pay;
            });

            const subtotalRow = dataTableBody.insertRow();
            subtotalRow.insertCell().colSpan = 12;
            subtotalRow.textContent = `2-Week Subtotal: Hours - ${subtotalHours.toFixed(2)}, Earnings - $${subtotalPay.toFixed(2)}`;
            subtotalRow.classList.add('two-week-subtotal');
        }

        function exportToCSV() {
            if (allWeeksData.length === 0) {
                alert('No data to export.');
                return;
            }

            let csvContent = "Week,Date Range,Day,Date,Hours Worked,Break (Hours),Co-worker,Notes,Regular Hours,Overtime Hours,Regular Pay,Overtime Pay,Total Pay\n";
            allWeeksData.forEach(weekData => {
                const weekBreak = weekData.break || 0;
                weekData.days.forEach(dayData => {
                    const hours = parseFloat((dayData.hours - (weekBreak / 7)).toFixed(2));
                    const payDetails = calculatePay(hours, parseFloat(document.getElementById('hourly-rate').value) || 0);
                    csvContent += `${weekData.week},${weekData.dateRange},${dayData.day},${dayData.date},${dayData.hours},${(weekBreak / 7).toFixed(2)},${dayData.coworker},${dayData.notes},${payDetails.regularHours},${payDetails.overtimeHours},$${payDetails.regularPay.toFixed(2)},$${payDetails.overtimePay.toFixed(2)},$${payDetails.totalPay.toFixed(2)}\n`;
                });
            });

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.setAttribute("href", url);
            link.setAttribute("download", "time_tracking_data.csv");
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function clearAllData() {
            if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
                allWeeksData = [];
                localStorage.removeItem('timeTrackerData');
                dataTableBody.innerHTML = '';
                totalHoursWeekDisplay.textContent = '0.00';
                totalHoursMonthDisplay.textContent = '0.00';
                totalHoursYearDisplay.textContent = '0.00';
                totalEarningsWeekDisplay.textContent = '0.00';
                totalEarningsMonthDisplay.textContent = '0.00';
                totalEarningsYearDisplay.textContent = '0.00';
                grandTotalEarningsDisplay.textContent = '$0.00';
                dailyHoursContainer.innerHTML = '';
                weekCounter = 1;
                addWeek();
                alert('All data cleared.');
            }
        }

        addWeek();
        loadTableData();
    </script>
</body>
</html>
